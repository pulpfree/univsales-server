schema {
  query: Query
  mutation: Mutation
}

type Address {
  _id: ID!
  associate: String!
  city: String
  country: String
  countryCode: String
  customerID: ID
  location: Location
  postalCode: String
  provinceCode: String
  street1: String
  street2: String
  type: String
}

type AddressGeo {
  _id: ID!
  city: String
  customerID: ID
  dist: GeoDistance
  location: Location
  postalCode: String
  provinceCode: String
  street1: String
}

type Customer {
  _id: ID!
  active: Boolean!
  address: Address
  createdAt: String
  email: String
  name: CustomerName!
  notes: String
  phones: [CustomerPhone]
  updatedAt: String
}

type CustomerName {
  first: String!
  last: String!
  spouse: String
}

type CustomerPhone {
  _id: PhoneType!
  countryCode: String
  number: String!
}

type DBResult {
  n: Int
  ok: Int
}

type GeoDistance {
  calculated: Float
  location: Location
}

type GroupItemCosts {
  extendTotal: Float
  extendUnit: Float
}

type GroupItemDims {
  height: WindowDims
  width: WindowDims
}

type GroupItemSpecs {
  extendSqft: Int
  options: String
  overSize: Int
  sqft: Int
}

type GroupWindowDims {
  decimal: Float
  diff: Float
  fraction: String
  inch: Int
}

type JobSheet {
  _id: ID!
  addressID: Address
  createdAt: String
  customerID: Customer
  features: String
  number: Int!
  updatedAt: String
}

type JobSheetData {
  groups: [JobSheetGroup]
  jobsheet: JobSheet
  other: [JobSheetOther]
  windows: [JobSheetWindow]
}

type JobSheetGroup {
  _id: ID!
  costs: JobSheetGroupCosts
  createdAt: String
  dims: JobSheetGroupDims
  items: [JobSheetGroupItem]
  jobsheetID: ID!
  qty: Int
  rooms: [String]
  specs: JobSheetGroupSpecs
  updatedAt: String
}

type JobSheetGroupCosts {
  discounted: Float
  discountedAmount: Float
  extendTotal: Float
  extendUnit: Float
  install: Float
  installType: Float
  netUnit: Float
  options: Float
  trim: Float
  windows: Float
}

type JobSheetGroupDims {
  height: GroupWindowDims
  width: GroupWindowDims
}

type JobSheetGroupItem {
  _id: ID
  costs: GroupItemCosts
  dims: GroupItemDims
  product: Product
  productID: ID
  qty: Int
  specs: GroupItemSpecs
}

type JobSheetGroupSpecs {
  groupTypeDescription: String
  installType: String
  options: String
  sqft: Int
  style: String
  trim: String
}

type JobSheetItemCosts {
  discounted: Float
  discountedAmount: Float
  extendTotal: Float
  extendUnit: Float
  install: Float
  installType: Float
  netUnit: Float
  options: Float
  trim: Float
  window: Float
}

type JobSheetOther {
  _id: ID!
  costs: OtherCosts
  createdAt: String
  description: String
  jobsheetID: ID
  product: String
  qty: Int
  rooms: [String]
  specs: OtherSpecs
  updatedAt: String
}

type JobSheetWindow {
  _id: ID!
  costs: JobSheetItemCosts
  createdAt: String
  dims: JobSheetWindowDims
  jobsheetID: ID
  productID: Product
  qty: Int
  rooms: [String]
  specs: JobSheetWindowSpecs
  updatedAt: String
}

type JobSheetWindowDims {
  height: WindowDims
  width: WindowDims
}

type JobSheetWindowSpecs {
  installType: String
  options: String
  overSize: Int
  sqft: Int
  trim: String
}

type Location {
  coordinates: [Float]
  type: String
}

type Mutation {
  createInvoice(id: ID!): Quote
  customerPersist(addressInput: AddressInput, customerInput: CustomerInput!): Customer
  customerPersistNotes(id: ID!, notes: String!): Customer
  customerRemove(id: ID!): DBResult
  customerToggleActive(id: ID!): Customer
  jobSheetPersist(addressID: ID, addressInput: AddressInput, jobSheetInput: JobSheetInput!): JobSheet
  jobSheetPersistFeatures(features: String!, id: ID!): JobSheet
  jobSheetPersistGroup(input: GroupInput!): JobSheetGroup
  jobSheetPersistOther(input: OtherInput!): JobSheetOther
  jobSheetPersistWindow(input: WindowInput!): JobSheetWindow
  jobSheetRemove(id: ID!): DBResult
  jobSheetRemoveGroup(id: ID!): DBResult
  jobSheetRemoveOther(id: ID!): DBResult
  jobSheetRemoveWindow(id: ID!): DBResult
  paymentPersist(input: PaymentInput!): Payment
  paymentRemove(id: ID!): DBResult
  quotePersist(input: QuoteInput!): Quote
  quotePersistDiscount(input: QuoteDiscountInput!): Quote
  quoteRemove(id: ID!): DBResult
}

type OtherCosts {
  extendTotal: Float
  extendUnit: Float
}

type OtherSpecs {
  location: String
  options: String
}

type PDFSignedURL {
  code: Int
  data: SignedURLData
  message: String
  status: String
  timestamp: Int
}

type Payment {
  _id: ID!
  amount: Float
  createdAt: String
  quoteID: ID
  type: String
  updatedAt: String
}

type Product {
  _id: ID!
  maxHeight: Int
  maxWidth: Int
  minHeight: Int
  minWidth: Int
  name: String!
  premium: ProductPremium
  sizeCost: AWSJSON
}

type ProductPremium {
  cost: Int
  oversizeLimit: Int
}

type Query {
  customer(customerID: ID!): Customer
  jobSheetData(jobSheetID: ID!): JobSheetData
  jobSheetGroup(groupID: ID!): JobSheetGroup
  jobSheetOther(otherID: ID!): JobSheetOther
  jobSheetWindow(windowID: ID!): JobSheetWindow
  payments(quoteID: ID!): [Payment]
  pdfSignedURL(input: SignedURLInput!): PDFSignedURL
  products: [Product]
  quote(quoteID: ID!): Quote
  quoteNearbyJobs(input: AddressGeoInput): [AddressGeo]
  searchCustomer(active: Boolean, field: String, search: String, value: String): [Customer]
  searchCustomerRecent: [QuoteRecent]
  searchJobSheetsByCustomer(customerID: ID!): [JobSheet]
  searchQuotes(closed: Boolean, invoiced: Boolean, year: String): Quotes
  searchQuotesByCustomer(customerID: ID!): Quotes
}

type Quote {
  _id: ID!
  closed: Boolean!
  createdAt: String
  customerID: Customer
  deposit: Boolean!
  discount: QuoteDiscount
  invoiced: Boolean!
  itemCosts: QuoteItemCosts
  itemSummary: QuoteItemSummary
  items: QuoteItems
  jobsheetID: JobSheet
  number: Int!
  quotePrice: QuotePrice
  updatedAt: String
  version: Int!
}

type QuoteDiscount {
  description: String
  discount: Float
  subtotal: Float
  tax: Float
  total: Float
}

type QuoteItemCosts {
  group: Float
  other: Float
  subtotal: Float
  window: Float
}

type QuoteItemSummary {
  group: QuoteItemSummaryDetails
  other: QuoteItemSummaryDetails
  window: QuoteItemSummaryDetails
}

type QuoteItemSummaryCosts {
  extendTotal: Float
  extendUnit: Float
  netUnit: Float
}

type QuoteItemSummaryDetails {
  items: [QuoteItemSummaryItems]
  totals: QuoteItemSummaryExtendTotal
}

type QuoteItemSummaryExtendTotal {
  extendTotal: Float
}

type QuoteItemSummaryItems {
  costs: QuoteItemSummaryCosts
  description: String
  qty: Int
  rooms: String
  specs: AWSJSON
}

type QuoteItems {
  group: [String]
  other: [String]
  window: [String]
}

type QuotePrice {
  outstanding: Float
  payments: Float
  subtotal: Float
  tax: Float
  total: Float
}

type QuoteRecent {
  _id: ID!
  address: QuoteRecentAddress
  customer: Customer
  customerID: ID
  invoiced: Boolean
  number: Int
  quotePrice: QuotePrice
  updatedAt: String
  version: Int
}

type QuoteRecentAddress {
  _id: ID
  city: String
  street1: String
}

type Quotes {
  quotes: [Quote]!
  totalInvoiced: Float
  totalOutstanding: Float
}

type Schema {
  mutation: Mutation
  query: Query
}

type SignedURLData {
  url: String
}

type WindowDims {
  decimal: Float
  fraction: String
  inch: Int
  overSize: Int
  round: Int
  underSize: Int
}

enum PhoneType {
  home
  mobile
}

input AddressGeoInput {
  coordinates: [Float]
  maxDistance: Int
}

input AddressInput {
  _id: ID
  associate: String!
  city: String!
  country: String
  countryCode: String
  customerID: ID
  location: LocationInput
  postalCode: String!
  provinceCode: String!
  street1: String!
  street2: String
  type: String!
}

input CustomerInput {
  _id: ID
  email: String
  name: CustomerNameInput!
  phones: [CustomerPhoneInput]
}

input CustomerNameInput {
  first: String!
  last: String!
  spouse: String
}

input CustomerPhoneInput {
  _id: PhoneType!
  countryCode: String
  number: String!
}

input DiscountInput {
  description: String
  discount: Float
  subtotal: Float
  tax: Float
  total: Float
}

input GroupCostsInput {
  discountAmount: Float
  discounted: Float
  extendTotal: Float
  extendUnit: Float
  install: Float
  installType: Float
  netUnit: Float
  options: Float
  trim: Float
  windows: Float
}

input GroupDimsInput {
  decimal: Float
  diff: Float
  fraction: String
  inch: Int
}

input GroupHWDimsInput {
  height: GroupDimsInput
  width: GroupDimsInput
}

input GroupInput {
  _id: ID
  costs: GroupCostsInput
  dims: GroupHWDimsInput
  items: [GroupItemInput]
  jobsheetID: ID!
  qty: Int
  rooms: [String]
  specs: GroupSpecsInput
}

input GroupItemCostsInput {
  extendTotal: Float
  extendUnit: Float
}

input GroupItemInput {
  _id: ID!
  costs: GroupItemCostsInput
  dims: WindowHWDimsInput
  product: GroupItemProductInput
  productID: ID!
  qty: Int
  specs: GroupItemSpecsInput
}

input GroupItemProductInput {
  name: String
}

input GroupItemSpecsInput {
  extendSqft: Int
  options: String
  overSize: Int
  sqft: Int
}

input GroupSpecsInput {
  groupTypeDescription: String
  installType: String
  options: String
  sqft: Int
  style: String
  trim: String
}

input ItemCostsInput {
  group: Float
  other: Float
  subtotal: Float
  window: Float
}

input ItemSummaryCostsInput {
  extendTotal: Float
  extendUnit: Float
  netUnit: Float
}

input ItemSummaryDetailsInput {
  items: [ItemSummaryItemsInput]
  totals: ItemSummaryExtendTotalInput
}

input ItemSummaryExtendTotalInput {
  extendTotal: Float
}

input ItemSummaryInput {
  group: ItemSummaryDetailsInput
  other: ItemSummaryDetailsInput
  window: ItemSummaryDetailsInput
}

input ItemSummaryItemsInput {
  costs: ItemSummaryCostsInput
  description: String
  qty: Int
  rooms: String
  specs: AWSJSON
}

input ItemsInput {
  group: [String]
  other: [String]
  window: [String]
}

input JobSheetInput {
  _id: ID
  customerID: ID!
  features: String
}

input LocationInput {
  coordinates: [Float]
  type: String
}

input OtherCostsInput {
  extendTotal: Float
  extendUnit: Float
}

input OtherInput {
  _id: ID
  costs: OtherCostsInput
  description: String
  jobsheetID: ID
  product: String
  qty: Int
  rooms: [String]
  specs: OtherSpecsInput
}

input OtherSpecsInput {
  location: String
  options: String
}

input PaymentInput {
  _id: ID
  amount: Float!
  quoteID: ID!
  type: String!
}

input QuoteDiscountInput {
  _id: ID!
  discount: DiscountInput!
  quotePrice: QuotePriceInput!
}

input QuoteInput {
  _id: ID
  customerID: ID!
  discount: DiscountInput
  features: String
  itemCosts: ItemCostsInput
  itemSummary: ItemSummaryInput
  items: ItemsInput
  jobsheetID: ID!
  quotePrice: QuotePriceInput
  version: Int
}

input QuotePriceInput {
  outstanding: Float
  payments: Float
  subtotal: Float
  tax: Float
  total: Float
}

input SignedURLInput {
  number: Int!
  type: String!
  version: Int
}

input WindowCostsInput {
  discounted: Float
  discountedAmount: Float
  extendTotal: Float
  extendUnit: Float
  install: Float
  installType: Float
  netUnit: Float
  options: Float
  trim: Float
  window: Float
}

input WindowDimsInput {
  decimal: Float
  fraction: String
  inch: Int
  overSize: Int
  round: Int
  underSize: Int
}

input WindowHWDimsInput {
  height: WindowDimsInput
  width: WindowDimsInput
}

input WindowInput {
  _id: ID
  costs: WindowCostsInput
  dims: WindowHWDimsInput
  jobsheetID: ID!
  productID: ID!
  qty: Int
  rooms: [String]
  specs: WindowSpecsInput
}

input WindowSpecsInput {
  extendSqft: Int
  installType: String
  options: String
  overSize: Int
  sqft: Int
  trim: String
}
